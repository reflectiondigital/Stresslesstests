<?php// fill in your data for the variables below$db_host = "localhost";$db_user = "stressle_drplusr";$db_pass = "l65cN3vqijWE";$db_database = "stressle_site";/*	*****************DON'T CHANGE ANYTHING BELOW THIS LINE*****************		FOR THE MOST PART THIS IS JUST A TYPICAL DATABASE WRAPPER MODULE	you will find it most useful if ever switching databases, but remember	that mysql has some non-standard code, and some may be used throughout	this application	DEVIATIONS FROM THE NORM	this code has a couple of added features that make it nice, but you need	to be aware of them.	1. all result query calls have a normal and a "_plain" format.		the normal is to return results with html special characters		translated (eg.  & becomes &amp;)		the _plain does not do this	2. the whole php "resource id" is removed.  you now longer need		to connect to the database yourself and store the resource id		and use that.  with this module, just query as needed, the module		will handle any needed connections		note: you can specify a resource id if you are running multiple		parallel queries (this shouldn't be needed very often though, usually		queries can be done in series)	3. the php "free_result" call is now VERY optional.  if fetch_results is		called on the final data of a query, the _free_result method is		automatically called.		note: this will always happen in typical usage of			while($row = mysql_fetch_row($query_id)) {				// do stuff			}		so you really don't need to worry about _free_result anymore and		scripts will use less memory overall (although, there is an arguable		decrease in speed -- never really noticed on pages like this)*///global vars//convert date and time into MySQL format$mysqlDatetime = date("Y-m-d G:i:s");// used in the query stuff$db_html_chars = get_html_translation_table(HTML_SPECIALCHARS);/* CONNECTION */function db_connect() {	global $db_host, $db_database, $db_user, $db_pass;	$db = mysql_connect($db_host, $db_user, $db_pass) or pageError(mysql_error());	mysql_select_db($db_database, $db) or pageError(mysql_error());	return $db;}/* QUERY FUNCTIONS */// runs the query passed to the function.// -- resource id's are now optional// -- also optional flag noError which does not end the script on an error// note: noError does not stop php's error, but allows you to put in your own//       "or" statementfunction db_query($query, $resource_id = false, $noError = false) {	$query = db_remove_html_special($query);	if($resource_id === false) {		if($noError) {			$r = @mysql_query($query) or				$r = @mysql_query($query, db_connect());		}		else {			$r = @mysql_query($query) or				$r = @mysql_query($query, db_connect()) or					pageError('An Error Occured: ' . mysql_error());		}	}	else {		if($noError) {			$r = @mysql_query($query, $resource_id);		}		else {			$r = @mysql_query($query, $resource_id) or pageError('An Error Occured: ' . mysql_error());		}	}	return $r;}// wrapper for mysql_fetch_row that converts the results to "safe" htmlfunction db_fetch_row($query_id, $nofreeresult = false) {	$row = mysql_fetch_row($query_id) or mysql_error();	if($row && !is_array($row))		pageError('An Error Occured: ' . $row);	// if $row assigned successfully, return the results as html safe characters	if($row) {		for($i = 0; $i < count($row); ++$i) {			$row[$i] = db_add_html_special($row[$i]);		}		return $row;	}	// else	if($nofreeresult == false) @mysql_free_result($query_id);	return false;}// wrapper for mysql_num_rows// same thing with the $row error handling except now we look for is_numericfunction db_num_rows($query_id) {	$num = mysql_num_rows($query_id);	if(!is_numeric($num))		pageError('An Error Occured During a Database Call.  Please Contact an Administrator.');	return $num;}/* helpers */function db_remove_html_special($str) {	global $db_html_chars;	return strtr($str, array_flip($db_html_chars));}/*you will notice the syntax:	$row = mysql_fetch_row($query_id) or mysql_error();	if($row && !is_array($row))		pageError('An Error Occured: ' . $row);this may look bizarre, but what's happening is that $row is getting the fetch_row value, and ifthat is false, gets the value of mysql_error()now, fetch_row should always return an array, so if it didn't, it either returned false or a mysql errorthe string from the error message makes the value not false so we know there was an error only if$row is not an array and still evaluates to truethis messy syntax is a nice way of displaying clear error messages that the user doesn't have to searchfor admist the other html and javascript (that's the worst, when the error is hidden in javascript code andso it doesn't appear on the screen!  you have been warned of that!!!)*/// same as above with no formatting...function db_fetch_plain($query_id, $nofreeresult = false) {	$row = mysql_fetch_row($query_id) or mysql_error();	if($row && !is_array($row))		pageError('An Error Occured: ' . $row);	// if $row assigned successfully, return the results as html safe characters	if($row) {		return $row;	}	// else	if($nofreeresult == false) @mysql_free_result($query_id);	return false;}// fetches a single column with translated html special characters// (just a nice way of not having to access an array of one element)function db_fetch_single($query_id, $nofreeresult = false) {	$row = mysql_fetch_row($query_id) or mysql_error();	if($row && !is_array($row))		pageError('An Error Occured: ' . $row);	if(!$row) return false;	if($nofreeresult == false) @mysql_free_result($query_id);	return db_add_html_special($row[0]);}// fetches a single column as isfunction db_fetch_single_plain($query_id, $nofreeresult = false) {	$row = mysql_fetch_row($query_id) or mysql_error();	if($row && !is_array($row))		pageError('An Error Occured: ' . $row);	if(!$row) return false;	if($nofreeresult == false) @mysql_free_result($query_id);	return $row[0];}// returns current time like db stores...function db_current_time() {	return date("G:i:s");}// returns current date like db stores...function db_current_date() {	return date("Y-m-d");}// returns current date/time like db storesfunction db_now() {	return db_current_date() . ' ' . db_current_time();}function pageError($err){	echo $err;}function db_add_html_special($str) {	global $db_html_chars;	return strtr($str, $db_html_chars);}// similar to db_add_html_special except this function also// handles multiple spaces and the &nbsp; character...function db_format_for_display($str) {	$all_chars = get_html_translation_table(HTML_ENTITIES);	$str = strtr($str, array_flip($all_chars));	$str = strtr($str, $all_chars);	return $str;}?>